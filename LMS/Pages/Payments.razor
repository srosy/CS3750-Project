@page "/payments";

@if (_loading)
{
    <h1 class="header-default">Loading...</h1>
}
else
{
    @if (_showForm)
    {
        <div class="row text-center">
            <div class="col-md-4"></div>
            <div class="col-md-6">
                <div class="card LMS-card">
                    <div class="card-header LMS-form">
                        <h3>@Model.FormTitle</h3>
                    </div>
                    <div class="card card-body">
                        <EditForm Model="@_paymentModel" OnValidSubmit="@ProcessPayment">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group ">
                                <h4>Payment Amount Due: $@_amountDue.ToString("0.00")</h4>
                                <small class="text-danger">This amount will be charged to the inputted card</small>
                            </div>
                            <label for="card-number" class="form-inline">CC Number</label>
                            <div class="form-group ">
                                <InputText id="card-number" class="form-control LMS-input" type="text" placeholder="CC Number" @bind-Value="_paymentModel.CC_Num" />
                            </div>

                            <label for="card-exp-date" class="form-inline">Exp Date</label>
                            <div class="form-group">
                                <InputDate id="card-exp-date" class="form-control LMS-input" title="End Date" type="date" @bind-Value="_paymentModel.ExpDate" />
                            </div>

                            <label for="card-ccv" class="form-inline">CVC Code</label>
                            <div class="form-group ">
                                <InputText id="card-ccv" class="form-control LMS-input" type="text" placeholder="CCV Code" @bind-Value="_paymentModel.CCV" />
                            </div>
                            <MatButton Class="btn btn-primary LMS-btn" type="submit">Process Payment</MatButton>
                        </EditForm>
                        <MatButton Class="btn btn-secondary LMS-btn" Type="" OnClick="ResetForm">Cancel</MatButton>
                    </div>
                </div>
            </div>
            <div class="col-md-4"></div>
        </div>
    }
    else
    {
        <h3 class="header-default courses-header">Payments</h3>
        @if (_amountDue > 0)
        {
            <MatButton Class="add-new-course" @onclick="@(() => { _showForm = true; _paymentModel = new PaymentFormViewModel() { AccountId = Model.Account.AccountId, ExpDate = DateTime.UtcNow.AddDays(1) }; Model.FormTitle = "New Payment"; })">Make A Payment</MatButton>
        }
        <br />
        <h4 class="header-default">Balance Due: @(_amountDue > 0 ? $"${ _amountDue.ToString("0.00")}" : _amountDue < 0 ? $"None. Refund sent in mail for ${(_amountDue * -1).ToString("0.00")}." : "None")</h4>
        @if (Model.Payments.Any())
        {
            <MatTable Items="Model.Payments" class="mat-elevation-z5 lms-table" pa Striped="true" ShowPaging="false" @attributes="Model.TableAttributes">
                <MatTableHeader>
                    <th>Transaction Id</th>
                    <th>Transaction Date</th>
                    <th>Account Id</th>
                    <th>CC Number</th>
                    <th>Exp Date</th>
                    <th>CVC</th>
                    <th>Attempt Amount</th>
                    <th>Auth Amount</th>
                    <th>Payment Amount</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.TransactionId</td>
                    <td>@context.TransactionDate.Value.ToShortDateString()</td>
                    <td>@context.AccountId</td>
                    <td>@context.CardNumber</td>
                    <td>@context.ExpDate.ToShortDateString()</td>
                    <td>@context.CVC</td>
                    <td>@(context.AttemptAmount.ToString("####.00"))</td>
                    <td>@(context.AuthAmount.ToString("####.00"))</td>
                    <td>@(context.PaymentAmount.ToString("####.00"))</td>
                </MatTableRow>
            </MatTable>
        }
        else
        {
            <p class="text-danger">No payments made.</p>
        }
    }
}

@code {
    private PaymentsViewModel Model = new PaymentsViewModel();
    private PaymentFormViewModel _paymentModel = new PaymentFormViewModel();
    private bool _showForm;
    private bool _loading = true;
    private decimal _amountDue;
    private const decimal BASE_PAYMENT_AMOUNT = 100.00m;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var session = await SessionObj.GetSession(AzureDb, Storage);
            if (session == null)
            {
                NavMan.NavigateTo("sessionexpired");
            }
            else
            {
                await Setup(session.AccountId);
            }
        }
    }

    private async Task Setup(int acctId)
    {
        Model.Account = await DbService.GetAccount(AzureDb, acctId);
        await SetupBalances();
        _loading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Setups up the balances indication.
    /// </summary>
    /// <returns></returns>
    private async Task SetupBalances()
    {
        Model.Enrollments = await DbService.GetEnrollments(AzureDb, Model.Account.AccountId);
        Model.Payments = await DbService.GetPayments(AzureDb, Model.Account.AccountId);

        if (Model.Payments == null)
        {
            Model.Payments = new List<Data.Models.Payment>();
        }

        var chargedAmount = Model.Enrollments.Count() * BASE_PAYMENT_AMOUNT;
        var paymentAmount = Model.Payments.Sum(p => p.PaymentAmount);
        _amountDue = chargedAmount - paymentAmount;
    }

    /// <summary>
    /// Processes a payment from the form input.
    /// </summary>
    /// <returns></returns>
    private async Task ProcessPayment()
    {
        var payment = new Payment()
        {
            AccountId = _paymentModel.AccountId,
            CardNumber = _paymentModel.CC_Num,
            CVC = int.Parse(_paymentModel.CCV),
            ExpDate = _paymentModel.ExpDate,
            AttemptAmount = _amountDue
        };

        var success = await DbService.AddPayment(AzureDb, payment);
        await SetupBalances();
        await JS.InvokeVoidAsync("Toast", new[] { success ? "success" : "error", success ? "Successfully Processed Payment." : "Failed to Process Payment", success ? "3000" : "5000" }); // toasttype, message, duration
        ResetForm();
        this.StateHasChanged();
    }

    /// <summary>
    /// Resets the edit/create Payment form.
    /// </summary>
    private void ResetForm()
    {
        _showForm = false;
        _paymentModel = new PaymentFormViewModel()
        {
            AccountId = Model.Account.AccountId
        };
    }
}
