@page "/profile";

@if (_loading)
{
    <Loading />
}
else
{
    @if (_showForm)
    {
        <div class="row text-center">
            <div class="col-md-2">&nbsp;</div>
            <div class="col-md-8">
                <div class="card edit-profile-container">
                    <div class="card-header LMS-title">
                        <h3>Edit Profile</h3>
                    </div>
                    <div class="card card-body">
                        <EditForm Model="Model" OnValidSubmit="@SaveSettings">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group ">
                                <label for="profile-image-upload" class="LMS-form-label">Profile Picture</label>
                                <InputFile id="profile-image-upload" OnChange="UploadImageOnChange" title="Upload a profile image" />
                                <small class="input-file-message @(_fileMessage.ToLower().Contains("select") ? "text-danger" : "text-success")">@_fileMessage</small>
                            </div>
                            <div class="form-group ">
                                <InputText id="fname" class="form-control LMS-input" type="text" placeholder="First Name" @bind-Value="Model.Account.FirstName" />
                            </div>
                            <div class="form-group ">
                                <InputText id="lname" class="form-control LMS-input" type="text" placeholder="Last Name" @bind-Value="Model.Account.LastName" />
                            </div>
                            <div class="form-group">
                                <InputDate id="birthday" class="form-control LMS-input" title="Users must be 18+" type="date" @bind-Value="Model.Account.DOB" />
                            </div>
                            <div class="form-group ">
                                <InputText id="email" class="form-control LMS-input" type="text" placeholder="Email" disabled @bind-Value="Model.Account.Email" />
                            </div>
                            <div class="form-group">
                                <select id="role" class="form-control LMS-Input" @bind="Model.Account.Role">
                                    <option value="1">Student</option>
                                    <option value="2">Professor</option>
                                </select>
                            </div>
                            <div class="form-group ">
                                <InputText id="address" class="form-control LMS-input" type="text" placeholder="Address" @bind-Value="Model.Settings.Address" />
                            </div>
                            <div class="form-group ">
                                <InputText id="city" class="form-control LMS-input" type="text" placeholder="City" @bind-Value="Model.Settings.City" />
                            </div>
                            <div class="form-group">
                                <select id="profid" class="form-control LMS-Input" @bind="Model.Settings.State">
                                    <option value="0">- Select State -</option>
                                    @foreach (var s in Model.State.States)
                                    {
                                        <option value="@s.Abbreviations">@($"{s.Name} - {s.Abbreviations}")</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group ">
                                <InputText id="zipcode" class="form-control LMS-input" type="text" placeholder="ZipCode" @bind-Value="Model.Settings.ZipCode" />
                            </div>
                            <div class="form-group ">
                                <InputText id="country" class="form-control LMS-input" type="text" placeholder="Country" @bind-Value="Model.Settings.Country" />
                            </div>
                            <div class="form-group ">
                                <InputText id="phone" class="form-control LMS-input" type="text" placeholder="Phone Number" @bind-Value="Model.Settings.Phone" />
                            </div>
                            <div class="form-group ">
                                <InputTextArea id="biography" class="form-control LMS-input" type="text" placeholder="Biography" @bind-Value="Model.Settings.Biography" />
                            </div>
                            <div class="form-group ">
                                <InputText id="sml1" class="form-control LMS-input" type="text" placeholder="Social Media Link 1" @bind-Value="Model.Settings.SocialMediaLink1" />
                            </div>
                            <div class="form-group ">
                                <InputText id="sml2" class="form-control LMS-input" type="text" placeholder="Social Media Link 2" @bind-Value="Model.Settings.SocialMediaLink2" />
                            </div>
                            <div class="form-group ">
                                <InputText id="sml3" class="form-control LMS-input" type="text" placeholder="Social Media Link 3" @bind-Value="Model.Settings.SocialMediaLink3" />
                            </div>

                            <button class="btn btn-primary LMS-btn" type="submit">Save</button>
                        </EditForm>
                        <MatButton Class="btn btn-secondary LMS-btn" @onclick="@(() => { _showForm = false; })">Cancel</MatButton>
                    </div>
                </div>
            </div>
            <div class="col-md-2">&nbsp;</div>
        </div>
    }
    else
    {
        <h3 class="header-default courses-header profile-header"></h3>

        <br />
        @if (Model.Settings != null)
        {

            <div class="card">
                <div class="row">
                    <div class="col-md-3">
                        <br />
                        @if (!string.IsNullOrEmpty(Model.Settings.ProfileImageUrl))
                        {
                            <div class="col-md-6">
                                <img class="settings-profile-img" src="@Model.Settings.ProfileImageUrl" />
                            </div>
                        }
                    </div>
                    <div class="profile-data-grid col-md-3">
                        <h1 id="profile-name">@Model.Account.FirstName @Model.Account.LastName</h1>
                        <h4 id="profile-dob">Birthday: @Model.Account.DOB</h4>
                        <h4 id="profile-email">Email: @Model.Account.Email</h4>
                        <h4 id="profile-address">Address: @Model.Settings.Address</h4>
                        <h4 id="profile-city">City: @Model.Settings.City, @Model.Settings.State @Model.Settings.ZipCode</h4>
                        <h4 id="profile-country">Country: @Model.Settings.Country</h4>
                        <h4 id="profile-phone">Phone: @Model.Settings.Phone</h4>
                    </div>
                    <div class="profile-bio-grid col-md-6">
                        <h3>About Me:</h3>
                        <p id="profile-bio">@Model.Settings.Biography</p>
                        <MatButton Class="add-new-course" @onclick="@(() => { _showForm = true; })">Edit</MatButton>
                    </div>
                </div>
                <div class="row profile-link-grid">
                    <div class="col-md-3">
                        <a href="@Model.Settings.SocialMediaLink1" target="_blank" title="Click to go to"><img src="https://cs3750lms.blob.core.windows.net/images/insta.webp" class="profile-link zoom" /></a>
                        <a href="@Model.Settings.SocialMediaLink2" target="_blank" title="Click to go to"><img src="https://cs3750lms.blob.core.windows.net/images/twitter.webp" class="profile-link zoom" /></a>
                        <a href="@Model.Settings.SocialMediaLink3" target="_blank" title="Click to go to"><img src="https://www.flaticon.com/svg/vstatic/svg/25/25231.svg?token=exp=1613595903~hmac=c6c597a06cad35cd6b60947ba2472bc2" class="profile-link zoom" /></a>
                    </div>
                </div>
            </div>
        }
    }
}

@code {
    private SettingsViewModel Model = new SettingsViewModel();
    private bool _showForm;
    private bool _loading = true;
    private string[] _ignoreProps = { "SettingId", "ProfileImage", "UpdateDate", "AccountId", "CreateDate", "DeleteDate" };
    private string _fileMessage = "No file selected";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var session = await SessionObj.GetSession(AzureDb, Storage);
            if (session == null)
            {
                NavMan.NavigateTo("sessionexpired");
            }
            else
            {
                await Setup(session.AccountId);
            }
        }
    }

    private async Task Setup(int acctId)
    {
        Model.Account = await DbService.GetAccount(AzureDb, acctId);
        Model.Settings = await DbService.GetSettings(AzureDb, Model.Account.AccountId);

        if (Model.Settings == null)
        {
            Model.Settings = new Data.Models.Settings()
            {
                AccountId = Model.Account.AccountId
            };
        }

        _loading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Handles when a new Profile Image is uploaded.
    /// </summary>
    /// <param name="files"></param>
    /// <returns></returns>
    private async Task UploadImageOnChange(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        _fileMessage = file.Name;
        var fileBytes = await LMS_Image.ConvertFileToByteArray(file);
        var azureStorage = new AzureStorage();
        Model.Settings.ProfileImageUrl = await azureStorage.UploadFile(file.Name, fileBytes, Model.Account.AccountId);
    }

    /// <summary>
    /// Saves the settings selected.
    /// </summary>
    private async void SaveSettings()
    {
        //save account
        var acctSaved = await DbService.UpdateAccount(AzureDb, Model.Account);

        //save settings
        Model.Settings.UpdateDate = DateTime.UtcNow;
        var settingsSaved = await DbService.SaveSettings(AzureDb, Model.Settings);

        _showForm = !settingsSaved;
        StateHasChanged();
        await JS.InvokeVoidAsync("Toast", new[] { (acctSaved && settingsSaved ? "success" : "error"), (acctSaved && settingsSaved ? "Saved Profile Settings" : "An Error Occured"), "3000" }); // toasttype, message, duration
    }
}
