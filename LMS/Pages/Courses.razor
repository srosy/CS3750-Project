@page "/courses";

@if (_loading)
{
    <h1 class="header-default">Loading...</h1>
}
else
{
    @if (_showCourseForm)
    {
        <div class="row text-center">
            <div class="col-md-2"></div>
            <div class="col-md-8">
                <div class="card edit-profile-container">
                    <div class="card-header LMS-form">
                        <h3>@Model.FormTitle</h3>
                    </div>
                    <div class="card card-body">
                        <EditForm Model="@_courseModel" OnValidSubmit="@SaveCourse">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="form-group ">
                                <label for="cname" class="form-inline">Name</label>
                                <InputText id="cname" class="form-control LMS-input" type="text" placeholder="Name (CS3750)" @bind-Value="_courseModel.Name" />
                            </div>
                            <div class="form-group ">
                                <label for="cdesc" class="form-inline">Description</label>
                                <InputText id="cdesc" class="form-control LMS-input" type="text" placeholder="Description" @bind-Value="_courseModel.Description" />
                            </div>
                            <div class="form-group ">
                                <label for="credits" class="form-inline">Credit Hours</label>
                                <InputNumber id="credits" class="form-control LMS-input" type="number" placeholder="Number of Credits" @bind-Value="_courseModel.Credits" />
                            </div>
                            <div class="form-group">
                                <label for="sdate" class="form-inline">Start Date</label>
                                <InputDate id="sdate" class="form-control LMS-input" title="Start Date" type="date" @bind-Value="_courseModel.StartDate" />
                            </div>
                            <div class="form-group">
                                <label for="edate" class="form-inline">End Date</label>
                                <InputDate id="edate" class="form-control LMS-input" title="End Date" type="date" @bind-Value="_courseModel.EndDate" />
                            </div>
                            <div class="form-group">
                                <label for="stime" class="form-inline">Start Time</label>
                                @if (_invalidStartEndTimes)
                                {
                                    <small class="text-danger">Invalid Start/End Time</small>
                                }
                                <select id="stime" class="form-control LMS-Input" title="Select Class Start Time" @bind="_courseModel.StartTime">
                                    @for (int i = 0; i <= 24; i++)
                                    {
                                        var time = i < 10 ? $"0{i}:00" : $"{i}:00";
                                        <option value="@time">@time</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="stime" class="form-inline">End Time</label>
                                @if (_invalidStartEndTimes)
                                {
                                    <small class="text-danger">Invalid Start/End Time</small>
                                }
                                <select id="etime" class="form-control LMS-Input" title="Select Class End Time" @bind="_courseModel.EndTime">
                                    @for (int i = 0; i <= 24; i++)
                                    {
                                        var time = i < 10 ? $"0{i}:00" : $"{i}:00";
                                        <option value="@time">@time</option>
                                    }
                                </select>
                            </div>
                            @if (_courseModel.CourseId > 0)
                            {
                                <div class="form-group">
                                    <MatCheckbox Label="Delete Course" @bind-Value="_deleteCourse" />
                                </div>
                            }
                            <MatButton Class="btn btn-primary LMS-btn" type="submit">Save</MatButton>
                        </EditForm>
                        <MatButton Class="btn btn-secondary LMS-btn" Type="" OnClick="ResetForm">Cancel</MatButton>
                    </div>
                </div>
            </div>
            <div class="col-md-2"></div>
        </div>
    }
    else
    {
        <h3 class="header-default courses-header">Courses</h3>
        @if (_acctIsProfessor)
        {
            <MatButton Class="add-new-course" @onclick="@(() => { _showCourseForm = true; _deleteCourse = false; _courseModel = new Course() { ProfessorId = Model.Account.AccountId,  StartDate = DateTime.UtcNow, EndDate = DateTime.UtcNow.AddMonths(3) }; Model.FormTitle = "Add New Course"; })">Add New Course</MatButton>
        }
        <br />
        @if (Model.Courses.Any())
        {
            <MatTable Items="Model.Courses" class="mat-elevation-z5 lms-table"
                      Striped="true" FilterByColumnName="Description" PageLabel="Page:" DebounceMilliseconds="150"
                      AllowSelection="true" SelectionChanged="RowClick" @attributes="Model.TableAttributes">
                <MatTableHeader>
                    <th>Course ID</th>
                    <th>Name</th>
                    <th>Professor</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Description</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.CourseId</td>
                    <td>@context.Name</td>
                    <td>
                        @Model.Professors.First(p => p.AccountId == context.ProfessorId).FirstName&nbsp;
                        @Model.Professors.First(p => p.AccountId == context.ProfessorId).LastName
                    </td>
                    <td>@context.StartDate.ToShortDateString()</td>
                    <td>@context.EndDate.ToShortDateString()</td>
                    <td>@context.Description</td>
                </MatTableRow>
            </MatTable>
        }
        else
        {
            <p class="text-danger">No courses added.</p>
        }
    }
}


@code {
    private CoursesViewModel Model = new CoursesViewModel();
    private Course _courseModel = new Course();
    private bool _showCourseForm;
    private bool _deleteCourse;
    private bool _loading = true;
    private bool _acctIsProfessor = false;
    private bool _invalidStartEndTimes;

    protected async override Task OnInitializedAsync()
    {
        Model.Account = await DbService.GetAccount(AzureDb, (await SessionObj.GetSession(AzureDb, Storage)).AccountId);
        _acctIsProfessor = Model.Account.Role == (int)Role.PROFESSOR;
        Model.Courses = await DbService.GetCourses(AzureDb, _acctIsProfessor ? Model.Account.AccountId : 0);
        Model.Professors = await DbService.GetAccounts(AzureDb, Role.PROFESSOR);
        _loading = false;
    }

    /// <summary>
    /// Handles the row click event.
    /// </summary>
    /// <param name="row"></param>
    public void RowClick(object row)
    {
        if (!_acctIsProfessor) return;
        var course = row as Course;
        if (course != null)
        {
            Model.FormTitle = "Edit Course";
            _courseModel = course;
            _showCourseForm = true;
        }
        this.StateHasChanged();
    }

    /// <summary>
    /// Resets the edit/create Course form.
    /// </summary>
    private void ResetForm()
    {
        _showCourseForm = false;
        _courseModel = new Course();
    }

    /// <summary>
    /// Saves the new/existing Course.
    /// </summary>
    private async void SaveCourse()
    {
        if (int.Parse(_courseModel.StartTime.Substring(0, 2)) > int.Parse(_courseModel.EndTime.Substring(0, 2)))
        {
            _invalidStartEndTimes = true;
            return;
        }
        else
        {
            _invalidStartEndTimes = false;
        }

        if (_deleteCourse)
        {
            _courseModel.DeleteDate = DateTime.UtcNow;
            await DbService.UpdateEnrollmentsOnDeletedCourse(AzureDb, _courseModel);
        }

        var courseSaved = await DbService.SaveCourse(AzureDb, _courseModel);
        ResetForm();
        Model.Courses = await DbService.GetCourses(AzureDb, _acctIsProfessor ? Model.Account.AccountId : 0);
        await JS.InvokeVoidAsync("Toast", new[] { "success", "Saved Course.", "3000" }); // toasttype, message, duration
        this.StateHasChanged();
    }
}
