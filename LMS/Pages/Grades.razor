@page "/grades";

@if (_loading)
{
    <Loading />
}
else
{
    @if (_acctIsProfessor)
    {
        <div class="row text-center">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h2>Edit Student Grades</h2>
                    </div>
                    <div class="card card-body">

                        <div class="flex-row" style="margin-left: auto;">
                            <div class="form-inline">
                                <MatTooltip Tooltip="Course Name" Position="@MatTooltipPosition.Top" Attributes="Model.ToolTipAttributes">
                                    <select @ref="context.Current" class="form-control m-1" @bind="_filterCourseId">
                                        @foreach (var c in Model.Courses)
                                        {
                                            <option value="@c.CourseId">@c.Name</option>
                                        }
                                    </select>
                                </MatTooltip>
                                <MatTooltip Tooltip="Assignment Name" Position="@MatTooltipPosition.Top" Attributes="Model.ToolTipAttributes">
                                    <select @ref="context.Current" class="form-control m-1" @bind="_filterAssId">
                                        @foreach (var a in Model.Assignments)
                                        {
                                            <option value="@a.AssignmentId">@a.Name</option>
                                        }
                                    </select>
                                </MatTooltip>
                                <button type="button" class="btn btn-primary m-1" @onclick="Filter">Filter</button>
                            </div>
                        </div>

                        @if (_filteredSubmissions != null && _filteredSubmissions.Any())
                        {
                            var assType = Model.Assignments.First(a => a.AssignmentId == _filteredSubmissions.First().AssignmentId).SubmissionType;
                            <MatTable Items="_filteredSubmissions" class="mat-elevation-z5 lms-table" Striped="true" AllowSelection="false" ShowPaging="false">
                                <MatTableHeader>
                                    <th style="min-width: @GradesViewModel.COL_SIZE;">Student Name</th>
                                    <th style="min-width: @GradesViewModel.COL_SIZE;">Score Earned</th>
                                    <th style="min-width: 300px;">Submission Comments</th>
                                    <th style="min-width: 500px;">@(assType == (int)SubmissionType.FILE_UPLOAD ? "File Submission" : "Text Submission")</th>
                                </MatTableHeader>
                                <MatTableRow>
                                    <td class="text-left">
                                        @{
                                                        var student = Model.StudentAccounts.First(a => a.AccountId == context.AccountId);
                                            <p>@student.FirstName @student.LastName (ID: @student.AccountId)</p>
                                        }
                                    </td>
                                    <td>
                                        <input type="number" @bind-value="@context.Score" class="form-control" max="100" min="0" />
                                    </td>
                                    <td class="text-left"><small>@context.Comments</small></td>
                                    <td class="text-left">
                                        @if (assType == (int)SubmissionType.FILE_UPLOAD)
                                                    {
                                            <a href="@context.UploadFilePath" target="_self">Download @context.UploadFileName</a>
                                                    }
                                                    else
                                                    {
                                            <small>@context.TextResponse</small>
                                                    }
                                    </td>
                                </MatTableRow>
                            </MatTable>

                            <MatButton Class="btn btn-primary LMS-btn" Type="button" OnClick="Save">Save</MatButton>
                            <MatButton Class="btn btn-secondary LMS-btn" Type="button" OnClick="ResetForm">Reset</MatButton>

                            @if (_chart != null && _chart.Series.Any())
                            {
                                <div class="chart">
                                    <figure class="highcharts-figure">
                                        <div id="chart"></div>
                                    </figure>
                                </div>
                            }
                            else
                            {
                                <h4>Not enough assignments graded to generate chart(s). At least 4 submissions must be graded per assignment for a chart to generate.</h4>
                            }
                        }
                        else
                        {
                            if (_filterAss != null)
                            {
                                <h2>No submissions for @_filterAss.Name (AssignmentID: @_filterAss.AssignmentId)</h2>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        if (Model.Grades.Any())
        {
            <div class="card">
                <div class="card-header">
                    <h2>Grades for Your Classes</h2>
                </div>
                <div class="card card-body">
                    @foreach (var c in Model.Courses)
                    {
                        var gradeVM = Model.Grades.First(g => g.CourseId == c.CourseId);
                        <br />
                        <h2>@c.Name Grade: @(gradeVM.Grades.Any(g => g.ScoreDisplay.ToLower().Contains("not")) ? "N/A" : $"{gradeVM.OverallPercentageGrade}% ({gradeVM.OverallLetterGrade})")</h2>
                        <MatTable Items="gradeVM.Grades" class="mat-elevation-z5 lms-table" Striped="true" AllowSelection="false" ShowPaging="false">
                            <MatTableHeader>
                                <th style="min-width: @GradesViewModel.COL_SIZE;">Assignment Name</th>
                                <th style="min-width: @GradesViewModel.COL_SIZE;">Points</th>
                                <th style="min-width: @GradesViewModel.COL_SIZE;">Percentage</th>
                                <th style="min-width: @GradesViewModel.COL_SIZE;">Letter Grade</th>
                            </MatTableHeader>
                            <MatTableRow>
                                <td><a target="_self" href="/submission/@context.AssignmentId" title="Go to assignment: @context.AssignmentName">@context.AssignmentName</a></td>
                                <td>@context.ScoreDisplay</td>
                                <td>@(context.ScoreDisplay.ToLower().Contains("not") ? "N/A" : $"{context.Score}%")</td>
                                <td>@(context.ScoreDisplay.ToLower().Contains("not") ? "N/A" : $"{context.LetterGrade}")</td>
                            </MatTableRow>
                        </MatTable>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="text-center">
                <p class="text-danger">No posted Grades.</p>
            </div>
        }
    }
}

@code {
    private GradesViewModel Model = new GradesViewModel();
    private bool _loading = true;
    private bool _acctIsProfessor = false;

    private Course _filterCourse;
    private int _filterCourseId;
    private Assignment _filterAss;
    private int _filterAssId;
    private List<Data.Models.Submission> _filteredSubmissions;

    private BoxPlotChart _chart;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await SetupChart();
    }

    protected async override Task OnInitializedAsync()
    {
        Model.Account = await DbService.GetAccount(AzureDb, (await SessionObj.GetSession(AzureDb, Storage)).AccountId);
        _acctIsProfessor = Model.Account.Role == (int)Role.PROFESSOR;

        if (_acctIsProfessor)
        {
            Model.Courses = await DbService.GetCourses(AzureDb, Model.Account.AccountId);
            Model.Assignments = DbService.GetAssignments(AzureDb, Model.Courses);
            Model.Submissions = await AzureDb.Submissions.Where(s => s.DeleteDate == null).ToListAsync();
            Model.StudentAccounts = await AzureDb.Accounts.Where(a => a.Role == (int)Role.STUDENT).ToListAsync();

            var renderChart = false;
            foreach (var ass in Model.Assignments)
            {
                if (Model.Submissions.Where(s => s.AssignmentId == ass.AssignmentId).ToArray().Length > 1)
                {
                    renderChart = true;
                    break;
                }
            }
            if (renderChart)
            {
                _chart = await DbService.GetAssignmentStandingChart(AzureDb, Model.Assignments, "Class Standing By Assignment");
            }
            ResetForm();
        }
        else
        {
            Model.Grades = await DbService.GetGrades(AzureDb, Model.Account.AccountId);
            Model.Courses = AzureDb.Courses.Where(c => Model.Grades.Select(g => g.CourseId).ToList().Contains(c.CourseId)).ToList();
        }

        _loading = false;
    }

    /// <summary>
    /// Determines if the form input data is invalid and alerts the user if any.
    /// </summary>
    /// <returns></returns>
    private bool FormVerified()
    {
        var problemChildren = _filteredSubmissions.Where(s => s.Score < 0 || s.Score > Model.Assignments.First(a => a.AssignmentId == s.AssignmentId).MaxScore).ToList();

        problemChildren.ForEach(async pc =>
        {
            var ass = Model.Assignments.First(a => a.AssignmentId == pc.AssignmentId);
            await JS.InvokeVoidAsync("Toast", new[] { "error", $"Error saving {ass.Name}, expected 0 <= score <= {ass.MaxScore} but got: {pc.Score} ", "3000" }); // toasttype, message, duration
        });

        return !problemChildren.Any();
    }

    /// <summary>
    /// Saves the Grades.
    /// </summary>
    private async void Save()
    {
        if (!FormVerified())
        {
            return;
        }

        var gradesSaved = await DbService.SaveGrades(AzureDb, _filteredSubmissions);
        await JS.InvokeVoidAsync("Toast", new[] { gradesSaved ? "success" : "error", gradesSaved ? "Grades Saved." : "Failed to save grades.", "3000" }); // toasttype, message, duration
        StateHasChanged();
    }

    /// <summary>
    /// Resets the form.
    /// </summary>
    private void ResetForm()
    {
        _filterCourse = Model.Courses.First();
        _filterCourseId = _filterCourse.CourseId;
        _filterAss = Model.Assignments.Where(a => a.CourseId == _filterCourse.CourseId).FirstOrDefault();
        if(_filterAss != null)
        {
            _filterAssId = _filterAss.AssignmentId;
            Filter();
        }
    }

    /// <summary>
    /// Handles when a filter option is changed in the edit view.
    /// </summary>
    private void Filter()
    {
        _filteredSubmissions = new List<Data.Models.Submission>();

        _filterCourse = Model.Courses.First(c => c.CourseId == _filterCourseId);
        _filterAss = Model.Assignments?.FirstOrDefault(a => a.AssignmentId == _filterAssId);

        if (_filterAss != null && _filterAss.CourseId == _filterCourse.CourseId)
        {
            _filteredSubmissions = Model.Submissions.Where(s => s.AssignmentId == _filterAss.AssignmentId).ToList();
        }
        StateHasChanged();
    }

    private async Task SetupChart()
    {
        if (_chart != null && _chart.Series.Any())
        {
            var series = _chart.Series.Where(s => s != null).Select(s => s.Data).ToArray();
            var categories = _chart.Series.Where(s => s != null).Select(s => s.Name).ToArray();

            var seriesArray = _chart.Series.Where(s => s != null).Select(s => new
            {
                s.Data.low,
                s.Data.q1,
                s.Data.median,
                s.Data.q3,
                s.Data.high
            });

            await JS.InvokeVoidAsync("SetupAssignmentProfessorChart", "chart", _chart.Name, seriesArray, categories);
        }
    }
}


