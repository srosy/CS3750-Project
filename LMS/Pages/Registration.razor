@page "/registration";

@if (_loading)
{
    <Loading />
}
else
{
    @if (Model.Courses.Any())
    {
        <h3 class="header-default courses-header">@(_acctIsProfessor ? "Students Registered for your Courses" : "Registered Courses")</h3>
        <br />

        @if (_acctIsProfessor)
        {
            <MatTable Items="Model.Enrollments" class="mat-elevation-z5 lms-table"
                      Striped="true" PageLabel="Page:" DebounceMilliseconds="150"
                      @attributes="Model.TableAttributes">
                <MatTableHeader>
                    <th style="min-width: @COL_PROF_SIZE;">Name</th>
                    <th style="min-width: @COL_PROF_SIZE;">Student ID</th>
                    <th style="min-width: @COL_PROF_SIZE;">Course ID</th>
                    <th style="min-width: @COL_PROF_SIZE;">Course Description</th>
                </MatTableHeader>
                <MatTableRow>
                    @{ var student = Model.Students.FirstOrDefault(s => s.AccountId == context.AccountId); }
                    @if (student != null)
                                {
                        <td>@($"{student.FirstName} {student.LastName}")</td>
                        <td>@student.AccountId</td>
                        <td>@context.CourseId</td>
                        <td>@Model.Courses.First(c => c.CourseId == context.CourseId).Description</td>
                                }
                </MatTableRow>
            </MatTable>
        }
        else
        {
            <MatTable Items="Model.Courses" class="mat-elevation-z5 lms-table"
                      Striped="true" FilterByColumnName="Description" PageLabel="Page:" DebounceMilliseconds="150"
                      AllowSelection="true" SelectionChanged="RowClick" @attributes="Model.TableAttributes">
                <MatTableHeader>
                    <th style="min-width: @COL_SIZE;">Course ID</th>
                    <th style="min-width: @COL_SIZE;">Name</th>
                    <th style="min-width: @COL_SIZE;">Professor</th>
                    <th style="min-width: @COL_SIZE;">Start Date</th>
                    <th style="min-width: @COL_SIZE;">End Date</th>
                    <th style="min-width: @COL_SIZE;">Description</th>
                    <th style="min-width: @COL_SIZE;">Enrolled</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.CourseId</td>
                    <td>@context.Name</td>
                    <td>
                        @Model.Professors.First(p => p.AccountId == context.ProfessorId).FirstName&nbsp;
                        @Model.Professors.First(p => p.AccountId == context.ProfessorId).LastName
                    </td>
                    <td>@context.StartDate.ToShortDateString()</td>
                    <td>@context.EndDate.ToShortDateString()</td>
                    <td>@context.Description</td>

                    @{
                                    var enrolled = Model.Enrollments != null && Model.Enrollments.Any(c => c.CourseId == context.CourseId);
                    }
                    <td class="@(enrolled ? "text-success" : "text-danger")">@enrolled</td>
                </MatTableRow>
            </MatTable>
        }

    }
    else
    {
        <p class="text-danger">No courses available for registration.</p>
    }
}

@code {
    private EnrollmentsViewModel Model = new EnrollmentsViewModel();
    private bool _loading = true;
    private bool _acctIsProfessor;
    private const string COL_PROF_SIZE = "400px";
    private const string COL_SIZE = "220px";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var session = await SessionObj.GetSession(AzureDb, Storage);
            if (session == null)
            {
                NavMan.NavigateTo("sessionexpired");
            }
            else
            {
                await Setup(session.AccountId);
            }
        }
    }

    private async Task Setup(int acctId)
    {
        Model.Courses = await DbService.GetCourses(AzureDb);
        Model.Students = await DbService.GetAccounts(AzureDb, Role.STUDENT);
        Model.Professors = await DbService.GetAccounts(AzureDb, Role.PROFESSOR);
        Model.Account = await DbService.GetAccount(AzureDb, acctId);
        _acctIsProfessor = Model.Account.Role == (int)Role.PROFESSOR;

        if (_acctIsProfessor)
        {
            Model.Enrollments = await DbService.GetProfessorCourseEnrollments(AzureDb, Model.Account.AccountId);
        }
        else
        {
            Model.Enrollments = await DbService.GetEnrollments(AzureDb, Model.Account.AccountId);
            Model.Courses = Model.Courses.OrderByDescending(c => Model.Enrollments.FindIndex(e => e.CourseId == c.CourseId)).ThenBy(c => c.CourseId).ToList(); // order by enrollments first
        }

        _loading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Handles the row click event.
    /// </summary>
    /// <param name="row"></param>
    public async void RowClick(object row)
    {
        var course = row as Course;
        if (course != null)
        {
            var toastMsg = string.Empty;
            var toastCls = string.Empty;

            //removes course to enrollement list
            if (Model.Enrollments.Any(e => e.CourseId == course.CourseId))
            {
                Model.Enrollments.First(e => e.CourseId == course.CourseId).DeleteDate = DateTime.UtcNow;
                toastMsg = $"Unenrolled course {course.Name}";
                toastCls = "error";
            }
            else //adds course to enrollement list
            {
                Model.Enrollments.Add(new Enrollment()
                {
                    AccountId = Model.Account.AccountId,
                    CourseId = course.CourseId,
                    Credits = course.Credits,
                    CreateDate = DateTime.UtcNow
                });
                toastMsg = $"Enrolled in {course.Name}"; // toasttype, message, duration
                toastCls = "success";
            }

            await DbService.UpdateEnrollments(AzureDb, Model.Account.AccountId, Model.Enrollments);
            Model.Enrollments = await DbService.GetEnrollments(AzureDb, Model.Account.AccountId);
            await JS.InvokeVoidAsync("Toast", new[] { toastCls, toastMsg, "3000" }); // toasttype, message, duration

        }
        this.StateHasChanged();
    }
}
