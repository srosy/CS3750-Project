@page "/newaccount";
@layout UnauthenticatedLayout;

<div class="row text-center">
    <div class="col-md-4"></div>
    <div class="col-md-6">
        <div class="card LMS-card">
            <div class="card-header LMS-title">
                <h3>New Account</h3>
            </div>
            <div class="card card-body">
                @if (_emailSent)
                {
                <EditForm Model="_codeModel" OnValidSubmit="@VerifyEmail">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group has-success">
                        <InputText id="validationcode" class="form-control LMS-input" type="text" placeholder="Reset Code" @bind-Value="_codeModel.VerificationCode" />
                    </div>
                    <button type="submit" class="btn btn-primary LMS-btn">Verify Code</button>
                    <button type="button" class="btn btn-secondary LMS-btn" @onclick="ResendEmail">Resend Code</button>
                </EditForm>
                }
                else
                {
                    <EditForm Model="Model" OnValidSubmit="@CreateAccount">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group has-success">
                            <InputText id="fname" class="form-control LMS-input" type="text" placeholder="First Name" @bind-Value="Model.FirstName" />
                        </div>
                        <div class="form-group has-success">
                            <InputText id="lname" class="form-control LMS-input" type="text" placeholder="Last Name" @bind-Value="Model.LastName" />
                        </div>
                        <div class="form-group">
                            <InputDate id="birthday" class="form-control LMS-input" title="Users must be 18+" type="date" @bind-Value="Model.Birthday" />
                        </div>
                        <div class="form-group has-success">
                            <InputText id="email" class="form-control LMS-input" type="text" placeholder="Email" @bind-Value="Model.Email" />
                        </div>
                        <div class="form-group has-success">
                            <InputText id="password" class="form-control LMS-input" type="password" placeholder="Password" @bind-Value="Model.Auth.Password" />
                        </div>
                        <div class="form-group has-success">
                            <InputText id="confirm-password" class="form-control LMS-input" type="password" placeholder="Re-enter password" @bind-Value="_confirmPassword" />
                        </div>
                        <div class="form-group">
                            <select id="role" class="form-control LMS-Input" @bind="Model.Role">
                                <option value="0" selected>- Select Role -</option>
                                <option value="1">Student</option>
                                <option value="2">Professor</option>
                            </select>
                        </div>

                        <button class="btn btn-primary LMS-btn" type="submit">Create Account</button>
                    </EditForm>
                    <a href="/login">Already have an account?</a>
                }
                @if (!string.IsNullOrEmpty(_message))
                {
                    <p class="LMS-message">@_message</p>
                }
            </div>
        </div>
    </div>
    <div class="col-md-4"></div>
</div>

@code {
    private AccountViewModel Model = new AccountViewModel();
    private CodeVerificationViewModel _codeModel = new CodeVerificationViewModel();
    private string _message = string.Empty;
    private string _confirmPassword;
    private bool _emailSent;
    private DateTime _minDate = DateTime.UtcNow.AddYears(-100);
    private DateTime _maxDate = DateTime.UtcNow.AddYears(-18).AddDays(1);
    private DateTime _today;

    protected async override Task OnInitializedAsync()
    {
        Model.Birthday = DateTime.UtcNow.AddYears(-18); // must be at least 18
    }

    /// <summary>
    /// Creates the account from binding on the Edit form Model.
    /// </summary>
    private async void CreateAccount()
    {
        if (Model.Role <= 0)
        {
            _message = "User must select a type";
            return;
        }

        if (Model.Birthday > _maxDate || Model.Birthday < _minDate)
        {
            _message = $"DOB must be between {_minDate.ToShortDateString()} and {_maxDate.ToShortDateString()}";
            return;
        }

        if (!_confirmPassword.Equals(Model.Auth.Password))
        {
            _message = "Passwords do not match!";
            return;
        }

        var acctCreated = await DbService.CreateAccount(AzureDb, Model);
        if (acctCreated)
        {
            _emailSent = await DbService.SendEmail(Model.Email, AzureDb);
            _message = "A validation code has been sent to your email.";
            StateHasChanged();
        }
    }

    private async void VerifyEmail()
    {
        if (_codeModel.VerificationCode.Equals(Model.Auth.ResetCode))
        {
            await DbService.VerifyEmail(Model.Email, AzureDb);
            NavMan.NavigateTo("login");
        }
        else _message = "Invalid Reset Code";
    }

    private async void ResendEmail()
    {
        await DbService.SendEmail(Model.Email, AzureDb);
        _message = "Verification Email Sent";
    }
}
